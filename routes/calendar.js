var express = require('express');
var router = express.Router();
var util = require('../util');

// TODO: Implement
function parseQueryParams(req) {
  return {};
}

/*
 * GET
 */
router.get('/', function (req, res) {
  var collection = req.db.collection('calendars');
  var query = parseQueryParams(req);
  collection.find(query).paginate(req.query.limit, req.query.offset).toArray(function (err, calendars) {
    res.json(calendars);
  });
});

router.get('/:id', function (req, res) {
  var id = util.convertID(req.params.id);
  var collection = req.db.collection('calendars');
  collection.findOne({_id: id}, function (err, calendar) {
    if (calendar === null) {
      return res.err400('Calendar not found');
    } else {
      res.json(calendar);
    }
  });
});

/*
 * POST
 */
router.post('/', function (req, res) {
  var userID = util.convertID(req.body.user); // userID could be inferred from API token
  req.db.collection('users').findOne({_id: userID}, function(err, user) {
    if (user === null) {
      return res.err400('User does not exist');
    }
    var title = req.body.title;
    if (!title) {
      return res.err400('Title must be non-empty');
    }

    var calendar = {
      user: userID,
      title: title,
      description: req.body.description || ''
    };

    req.db.collection('calendars').insertOne(calendar, function (err, result) {
      req.db.collection('users').updateOne({_id: userID}, {$addToSet: {calendars: calendar._id}},  function (err, result) {
        res.json(calendar); // Calendar will have _id generated by Mongo
      });

    })
  });
});

router.post('/:id', function (req, res) {
  var calendarUpdate = {};
  var id = util.convertID(req.params.id);
  var collection = req.db.collection('calendars');
  collection.findOne({_id: id}, function (err, calendar) {
    if (calendar === null) {
      return res.err400('Calendar not found');
    } else {
      if (req.body.title) {
        calendarUpdate.title = req.body.title;
      }

      collection.findOneAndUpdate({_id: id}, {$set: calendarUpdate}, {returnOriginal: false}, function (err, calendar) {
        if (calendar === null) {
          return res.err400('Calendar not found');
        } else {
          res.json(calendar);
        }
      });
    }
  });
});

/*
 * DELETE
 */
router.delete('/:id', function (req, res) {
  var id = util.convertID(req.params.id);
  var calendars = req.db.collection('calendars');
  calendars.findOneAndDelete({_id: id}, function (err, result) {
    if (result === null || result.value === null) {
      return res.err400('Calendar not found');
    } else {
      var events = req.db.collection('events');
      events.deleteMany({calendar: id}, function(err, result) {
        res.json(result);
      });
    }
  });
});

module.exports = router;
