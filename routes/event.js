var ObjectID = require('mongodb').ObjectID;
var express = require('express');
var router = express.Router();
var util = require('../util');

// TODO: Implement
function parseQueryParams(req) {
  return {};
}

function eventFromRequestOr400(req, res) {
  if (!ObjectID.isValid(req.body.calendar)) {
    res.err400('Invalid calendar ID');
  }
  var calendarId = ObjectID(req.body.calendar);
  if (req.db.collection('calendar').count({_id: calendarId}) !== 1) {
    // TODO: Check access rights
    res.err400('Calendar does not exist');
  }
  var title = req.body.title;
  if (title === null) {
    res.err400('Title must be non-empty');
  }
  var times = util.validateTimes(req.body.start, req.body.end);
  if (times.reason !== null) {
    res.err400(times.reason);
  }

  return {
    calendar: calendarId,
    title: title,
    description: req.body.description || '',
    start: times.start,
    end: times.end,
  };
}

/* GET event listing. */
router.get('/', function (req, res) {
  var collection = req.db.collection('events');
  var query = parseQueryParams(req);
  collection.find(query).paginate(req.query.limit, req.query.offset).toArray(function (err, events) {
    res.json(events);
  });
});

router.get('/:id', function (req, res) {
  if (!ObjectID.isValid(req.params.id)) {
    res.err400('Invalid event ID');
  }
  var id = ObjectID(req.params.id);
  var collection = req.db.collection('events');
  collection.findOne({_id: id}, function (err, event) {
    if (event === null) {
      res.err400('Event not found');
    } else {
      res.json(event);
    }
  });
});

router.post('/', function (req, res) {
  var event = eventFromRequestOr400(req, res);
  var collection = req.db.collection('events');
  collection.insertOne(event, function (err, result) {
    res.json(event); // Event will have _id generated by Mongo
  })
});

module.exports = router;
