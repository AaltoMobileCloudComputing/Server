var express = require('express');
var router = express.Router();
var util = require('../util');

// TODO: Implement
function parseQueryParams(req) {
  return {};
}

/*
 * GET
 */
router.get('/', function (req, res) {
  var collection = req.db.collection('events');
  var query = parseQueryParams(req);
  collection.find(query).paginate(req.query.limit, req.query.offset).toArray(function (err, events) {
    res.json(events);
  });
});

router.get('/:id', function (req, res) {
  var id = util.convertID(req.params.id);
  var collection = req.db.collection('events');
  collection.findOne({_id: id}, function (err, event) {
    if (event === null) {
      return res.err400('Event not found');
    } else {
      res.json(event);
    }
  });
});

/*
 * POST
 */
router.post('/', function (req, res) {
  var calendarId = util.convertID(req.body.calendar);
  req.db.collection('calendars').count({_id: calendarId}, function(err, result) {
    if (result !== 1) {
      return res.err400('Calendar does not exist');
    }
    var title = req.body.title;
    if (!title) {
      return res.err400('Title must be non-empty');
    }
    var times = util.convertTimes(req.body.start, req.body.end);
    console.log(times);
    if (times.error) {
      return res.err400(times.error);
    }

    var event = {
      calendar: calendarId,
      title: title,
      description: req.body.description || '',
      start: times.start,
      end: times.end,
    };

    var collection = req.db.collection('events');
    collection.insertOne(event, function (err, result) {
      res.json(event); // Event will have _id generated by Mongo
    })
  });
});

router.post('/:id', function (req, res) {
  // TODO: Clear this mess
  var eventUpdate = {};
  var id = util.convertID(req.params.id);
  var collection = req.db.collection('events');
  collection.findOne({_id: id}, function (err, event) {
    if (event === null) {
      return res.err400('Event not found');
    } else {
      if (req.body.title) {
        eventUpdate.title = req.body.title;
      }

      var times = util.convertTimes(req.body.start || event.start, req.body.end || event.end);
      if (times.error) {
        return res.err400(times.error);
      }
      eventUpdate.start = times.start;
      eventUpdate.end = times.end;

      if (req.body.calendar) {
        if (!util.convertID.isValid(req.body.calendar)) {
          return res.err400('Invalid calendar ID');
        }
        var calendarId = util.convertID(req.body.calendar);
        if (req.db.collection('calendar').count({_id: calendarId}) !== 1) {
          // TODO: Check access rights
          return res.err400('Calendar does not exist');
        } else {
          eventUpdate.calendar = calendarId;
          collection.findOneAndUpdate({_id: id}, {$set: eventUpdate}, {returnOriginal: false}, function (err, event) {
            if (event === null) {
              return res.err400('Event not found');
            } else {
              res.json(event);
            }
          });
        }
      } else {
        collection.findOneAndUpdate({_id: id}, {$set: eventUpdate}, {returnOriginal: false}, function (err, event) {
          if (event === null) {
            return res.err400('Event not found');
          } else {
            res.json(event);
          }
        });
      }
    }
  });
});

/*
 * DELETE
 */
router.delete('/:id', function (req, res) {
  var id = util.convertID(req.params.id);
  var collection = req.db.collection('events');
  collection.findOneAndDelete({_id: id}, function (err, result) {
    if (result === null || result.value === null) {
      return res.err400('Event not found');
    } else {
      res.json(result);
    }
  });
});

module.exports = router;
