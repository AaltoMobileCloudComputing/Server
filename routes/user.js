var express = require('express');
var router = express.Router();
var util = require('../util');

// TODO: Implement
function parseQueryParams(req) {
  return {};
}

function createUserFromRequest(req) {
  return {
    firstname: req.body.firstname,
    lastname: req.body.lastname,
    email: req.body.email // Maybe validate this?
  }
}

/*
 * GET
 */
router.get('/', function (req, res) {
  var collection = req.db.collection('users');
  var query = parseQueryParams(req);
  collection.find(query).paginate(req.query.limit, req.query.offset).toArray(function (err, users) {
    res.json(users);
  });
});

router.get('/:id', function (req, res) {
  var id = util.convertID(req.params.id);
  var collection = req.db.collection('users');
  collection.findOne({_id: id}, function (err, user) {
    if (user === null) {
      return res.err400('User not found');
    } else {
      res.json(user);
    }
  });
});

/*
 * POST
 */
router.post('/', function (req, res) {
  var user = createUserFromRequest(req);
  for (var property in user) {
    if (user.hasOwnProperty(property) && user[property] === null)
      return res.err400(property + ' must be non-empty');
  }
  user.token = util.generateApiToken();
  user.calendars = [];

  var collection = req.db.collection('users');
  collection.insertOne(user, function (err, result) {
    res.json(user); // user will have _id generated by Mongo
  });
});

router.post('/:id', function (req, res) {
  // TODO: Write less repetitive solution
  var userUpdate = {};
  if (req.body.firstname) {
    userUpdate.firstname = req.body.firstname;
  }
  if (req.body.lastname) {
    userUpdate.lastname = req.body.lastname;
  }
  if (req.body.email) {
    userUpdate.email = req.body.email; // Maybe validate this?
  }


  var id = util.convertID(req.params.id);
  var collection = req.db.collection('users');
  collection.findOneAndUpdate({_id: id}, {$set: userUpdate}, {returnOriginal: false}, function (err, user) {
    if (user === null) {
      return res.err400('user not found');
    } else {
      res.json(user);
    }
  });
});

/*
 * DELETE
 */
router.delete('/:id', function (req, res) {
  // Deleting user leaves "null" references to calendars' userID arrays
  var id = util.convertID(req.params.id);
  var users = req.db.collection('users');
  users.findOneAndDelete({_id: id}, function (err, result) {
    if (result === null || result.value === null) {
      return res.err400('user not found');
    } else {
      res.json(result);
    }
  });
});

module.exports = router;
